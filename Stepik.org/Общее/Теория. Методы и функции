#capitalize()
Метод capitalize() возвращает копию строки s, в которой первый символ имеет верхний регистр, а все остальные символы имеют нижний регистр.
Результатом выполнения следующего кода:
s = 'foO BaR BAZ quX'
print(s.capitalize())
будет:
Foo bar baz qux

swapcase()  инветирует регистр
title() первый символ каждого слова переводится в верхний регистр
lower() все символы имеют нижний регистр
upper() все символы имеют верхний регистр

count() 
Метод count(<sub>, <start>, <end>) считает количество непересекающихся вхождений подстроки <sub> в исходную строку s.
Результатом выполнения следующего кода:
s = 'foo goo moo'
print(s.count('oo'))
print(s.count('oo', 0, 8))  # подсчет с 0 по 7 символ
будет:
3
2

startswith()
Метод startswith(<suffix>, <start>, <end>) определяет начинается ли исходная строка s подстрокой <suffix>. Если исходная строка начинается с подстроки <suffix>,метод возвращает значение True, а если нет, то  False.
Результатом выполнения следующего кода:
s = 'foobar'
print(s.startswith('foo'))
print(s.startswith('baz'))
будет:
True
False

endswith()
Метод endswith(<suffix>, <start>, <end>) определяет оканчивается ли исходная строка s подстрокой <suffix>. Метод возвращает значение True если исходная строка оканчивается на подстроку <suffix> и False в противном случае.
Результатом выполнения следующего кода:
s = 'foobar'
print(s.endswith('bar'))
print(s.endswith('baz'))
будет:
True
False

find(), rfind()
Метод find(<sub>, <start>, <end>) находит индекс первого вхождения подстроки <sub> в исходной строке s. Если строка s не содержит подстроки <sub>, то метод возвращает значение -1. Мы можем использовать данный метод наравне с оператором in для проверки: содержит ли заданная строка некоторую подстроку или нет.
Результатом выполнения следующего кода:
s = 'foo bar foo baz foo qux'
print(s.find('foo'))
print(s.find('bar'))
print(s.find('qu'))
print(s.find('python'))
будет:
0
4
20
-1

rfind(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он ищет первое вхождение подстроки <sub> начиная с конца строки s.

index(), rindex()
index(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он вызывает ошибку  ValueError: substring not found во время выполнения программы, если подстрока <sub> не найдена.
rindex(<sub>, <start>, <end>) идентичен методу index(<sub>, <start>, <end>), за тем исключением, что он ищет первое вхождение подстроки <sub> начиная с конца строки s.

strip() возвращает копию строки s у которой удалены все пробелы стоящие в начале и конце строки.
lstrip() возвращает копию строки s у которой удалены все пробелы стоящие в начале строки.

rstrip()
Метод rstrip() возвращает копию строки s у которой удалены все пробелы стоящие в конце строки.

replace() (замена)
Метод replace(<old>, <new>) возвращает копию s со всеми вхождениями подстроки <old>, замененными на <new>.

Результатом выполнения следующего кода:
s = 'foo bar foo baz foo qux'
print(s.replace('foo', 'grault'))
будет:
grault bar grault baz grault qux

replace() может принимать опциональный третий аргумент <count>,  который определяет количество замен.
Результатом выполнения следующего кода:
s = 'foo bar foo baz foo qux'
print(s.replace('foo', 'grault', 2))
будет:
grault bar grault baz foo qux

Классификация символов

isalnum()
Метод isalnum() определяет, состоит ли исходная строка из буквенно-цифровых символов. Метод возвращает значение True если исходная строка является непустой и состоит только из буквенно-цифровых символов и False в противном случае.

isalpha()
Метод isalpha() определяет, состоит ли исходная строка из буквенных символов. Метод возвращает значение True если исходная строка является непустой и состоит только из буквенных символов и False в противном случае.

isdigit()
Метод isdigit() определяет, состоит ли исходная строка только из цифровых символов. Метод возвращает значение True если исходная строка является непустой и состоит только из цифровых символов и False в противном случае.

islower()
Метод islower() определяет, являются ли все буквенные символы исходной строки строчными (имеют нижний регистр). Метод возвращает значение True если все буквенные символы исходной строки являются строчными и False в противном случае. Все неалфавитные символы игнорируются!

isupper()
Метод isupper() определяет, являются ли все буквенные символы исходной строки заглавными (имеют верхний регистр). Метод возвращает значение True если все буквенные символы исходной строки являются заглавными и False в противном случае. Все неалфавитные символы игнорируются!

isspace()
Метод isspace() определяет, состоит ли исходная строка только из пробельных символов. Метод возвращает значение True если строка состоит только из пробельных символов и False в противном случае.

Функция ord

Функция ord позволяет определить код некоторого символа в таблице символов Unicode. Аргументом данной функции является одиночный символ.
Результатом выполнения следующего кода:
num1 = ord('A')
num2 = ord('B')
num3 = ord('a') 
print(num1, num2, num3)
будет:
65 66 97
Обратите внимание, что функция ord принимает именно одиночный символ. Если попытаться передать строку, содержащую более одного символа:
num = ord('Abc')
print(num)
мы получим ошибку времени выполнения:
TypeError: ord() expected a character, but string of length 3 found

Функция chr

Функция chr позволяет определить по коду символа сам символ. Аргументом данной функции является численный код.
Результатом выполнения следующего кода:
chr1 = chr(65)
chr2 = chr(75)
chr3 = chr(110) 
print(chr1, chr2, chr3)
будет:
A K n
Функции ord и chr часто работают в паре. Мы можем использовать следующий код для вывода всех заглавных букв английского алфавита:
for i in range(26):
    print(chr(ord('A') + i))

