#Кортежи по своей природе (задумке) – неизменяемые аналоги списков. 

Примеры кортежей
empty_tuple = ()                                      # пустой кортеж
point = (1.5, 6.0)                                    # кортеж из двух чисел
names = ('Vladimir', 'Anton', 'Roman')                # кортеж из трех строк
info = ('Vladimir', 'Kolotov', 28, 180, 80, False)    # кортеж из 6 элементов разных типов
nested_tuple = (('one', 'two'), ['three', 'four'])    # кортеж из кортежа и списка

#Кортеж с одним элементом. Для создания кортежа с единственным элементом после значения элемента ставят замыкающую запятую:
my_tuple = (1,)

#Тот факт, что кортеж является неизменяемым вовсе не означает, что мы не можем поменять содержимое списка в кортеже.
my_tuple = (1, 'python', [1, 2, 3])
print(my_tuple)
my_tuple[2][0] = 100
my_tuple[2].append(17)
print(my_tuple)
#>>>(1, 'python', [1, 2, 3])
#>>>(1, 'python', [100, 2, 3, 17])
#При этом важно понимать: меняется список, а не кортеж.
#Списки являются ссылочными типами данных, поэтому в кортеже хранится ссылка на список, которая не меняется при изменении самого списка.

#Преобразование кортежа в список.
number_tuple = (1, 2, 3, 4, 5)
number_list = list(number_tuple)
print(number_list)
#>>>[1, 2, 3, 4, 5]

#Преобразование списка в кортеж.
str_list = ['один', 'два', 'три']
str_tuple = tuple(str_list)
print(str_tuple)
#>>>('один', 'два', 'три')

#Преобразование строки в кортеж.
text = 'hello python'
str_tuple = tuple(text)
print(str_tuple)
#>>>('h', 'e', 'l', 'l', 'o', ' ', 'p', 'y', 't', 'h', 'o', 'n')

#Кортеж можно преобразовать в строку с помощью строкового метода join()
notes = ('Do', 'Re', 'Mi', 'Fa', 'Sol', 'La', 'Si')
string1 = ''.join(notes)
string2 = '.'.join(notes)
print(string1)
print(string2)
#>>>DoReMiFaSolLaSi
#>>>Do.Re.Mi.Fa.Sol.La.Si

#Для преобразования числа в кортеж, сначала нужно число преобразовать в строку, а уже потом использовать функцию tuple()

#Преобразование кортежа в список:
writer = ('Лев Толстой', 1827)
print(writer)
a = list(writer)
a[1] = 1828
writer = tuple(a)
print(writer)
#>>>('Лев Толстой', 1827)
#>>>('Лев Толстой', 1828)

#Операция конкатенации + и умножения на число *
print((1, 2, 3, 4) + (5, 6, 7, 8))
print((7, 8) * 3)
print((0,) * 10)
#>>>(1, 2, 3, 4, 5, 6, 7, 8)
#>>>(7, 8, 7, 8, 7, 8)
#>>>(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

a = (1, 2, 3, 4)
b = (7, 8)
a += b   # добавляем к кортежу a кортеж b
b *= 5   # повторяем кортеж b 5 раз 
print(a)
print(b)
#>>>(1, 2, 3, 4, 7, 8)
#>>>(7, 8, 7, 8, 7, 8, 7, 8, 7, 8)

#Вложенные кортежи. Подобно спискам, мы можем создавать вложенные кортежи.

colors = ('red', ('green', 'blue'), 'yellow')
numbers = (1, 2, (4, (6, 7, 8, 9)), 10, 11)
print(colors[1][1])
print(numbers[2][1][3])
#>>>blue
#>>>9

#Сортировка кортежей проводится с помощью sorted()

not_sorted_tuple = (34, 1, 8, 67, 5, 9, 0, 23)
print(not_sorted_tuple)
sorted_tuple = tuple(sorted(not_sorted_tuple))
print(sorted_tuple)
#>>>(34, 1, 8, 67, 5, 9, 0, 23)
#>>>(0, 1, 5, 8, 9, 23, 34, 67)
#функция sorted() возвращает список, но с помощью функции tuple() приводим результат сортировки к кортежу


#Распаковка кортежей

colors = ('red', 'green', 'blue', 'cyan')
a, b, c, d = colors
print(a)
print(b)
print(c)
print(d)

#>>>red
#>>>green
#>>>blue
#>>>cyan
#В приведенном примере кортеж colors распаковывается в переменные a, b, c, d
#Количество переменных должно совпадать с числом элементов в кортеже

a, b, c = 3, 2, 1
b, a, c = c, a, b

print(b, c, a)
#>>>1 2 3

#Есть способ собрать сразу несколько значений в одну переменную. Это делается при помощи звездочки перед именем переменной


a, b, *tail = 1, 2, 3, 4, 5, 6
#В этом случае в переменной a будет записана единица, в переменной b — двойка, а в переменной tail — список
#состоящий из всех аргументов, которые не попали в предыдущие переменные. В данном случае tail будет равен [3, 4, 5, 6]
#tail всегда будет списком, даже когда в него попадает лишь один элемент или даже ноль

a, b, *tail = 1, 2
print(tail)
#>>>[]


*names, surname = ('Стефани', 'Джоанн', 'Анджелина', 'Джерманотта')
print(names)
print(surname)
#>>>['Стефани', 'Джоанн', 'Анджелина']
#>>>Джерманотта


singer = ('Freddie', 'Bohemian Rhapsody', 'Killer Queen', 'Love of my life', 'Mercury')
name, *songs, surname = singer
print(name)
print(songs)
print(surname)
#>>>Freddie
#>>>['Bohemian Rhapsody', 'Killer Queen', 'Love of my life']
#>>>Mercury

#Примечание 1. Если вы хотите распаковать единственное значение в кортеже, после имени переменной должна идти запятая.

a = 1,      # не распаковка, а просто присвоение
b, = 1,     # распаковка
print(a)
print(b)
#>>>(1,)
#>>>1

#Примечание 2. Распаковывать можно не только кортеж, правая сторона может быть любой последовательностью (кортеж, строка или список).

info = ['Vladimir', 'beegeek.org']
user, domain = info    # распаковка списка

print(user)
print(domain)
a, b, c, d = 'math'    # распаковка строки
print(a)
print(b)
print(c)
print(d)
#>>>Vladimir
#>>>beegeek.org
#>>>m
#>>>a
#>>>t
#>>>h


#Примечание 3. Помимо метода split() строковый тип данных содержит метод partition().
#Метод partition() принимает на вход один аргумент sep, разделяет строку при первом появлении sep и возвращает кортеж, состоящий из трех элементов:
#часть перед разделителем, сам разделитель и часть после разделителя. Если разделитель не найден, то кортеж содержит саму строку, за которой следуют две пустые строки.

s1 = 'abc-de'.partition('-')
s2 = 'abc-de'.partition('.')
s3 = 'abc-de-fgh'.partition('-')
print(s1)
print(s2)
print(s3)
#>>>('abc', '-', 'de')
#>>>('abc-de', '', '')
#>>>('abc', '-', 'de-fgh')
